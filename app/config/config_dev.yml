imports:
    - { resource: config.yml }

framework:
    router:
        resource: "%kernel.root_dir%/config/routing_dev.yml"
        strict_requirements: true
    profiler: { only_exceptions: false }

web_profiler:
    toolbar: true
    intercept_redirects: false

monolog:
    handlers:
        main:
            type:   stream
            path:   "%kernel.logs_dir%/%kernel.environment%.log"
            level:  debug
        console:
            type:   console
            bubble: false
            verbosity_levels:
                VERBOSITY_VERBOSE: INFO
                VERBOSITY_VERY_VERBOSE: DEBUG
            channels: ["!doctrine"]
        console_very_verbose:
            type:   console
            bubble: false
            verbosity_levels:
                VERBOSITY_VERBOSE: NOTICE
                VERBOSITY_VERY_VERBOSE: NOTICE
                VERBOSITY_DEBUG: DEBUG
            channels: ["doctrine"]
        # uncomment to get logging in your browser
        # you may have to allow bigger header sizes in your Web server configuration
        #firephp:
        #    type:   firephp
        #    level:  info
        #chromephp:
        #    type:   chromephp
        #    level:  info

assetic:
    use_controller: true

#swiftmailer:
#    delivery_address: me@example.com

bazinga_faker:
    orm: doctrine
    seed: 1234
    locale: fr_FR
    entities:
        Mby\UserBundle\Entity\User:
            number: 100
            custom_formatters:
                username: { method: userName, unique: true }
                email: { method: email }
        Mby\CommunityBundle\Entity\Community:
            number: 100
            custom_formatters:
                name: { method: company }
                description: { method: text, parameters:{ maxNbChars: 1000 } }
                email: { method: email, unique: true }
        Mby\CommunityBundle\Entity\Season:
            number: 100
            custom_formatters:
                name: { method: lexify, parameters:{ string: 'Saison 2014-2015' } }
                fromDate: { method: dateTimeBetween, parameters:{ startDate: '2014-09-01', endDate: '2014-12-01' } }
                toDate: { method: null, optional: true }
                note: { method: text, parameters:{ maxNbChars: 500 } }
