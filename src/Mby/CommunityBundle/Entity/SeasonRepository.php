<?php

namespace Mby\CommunityBundle\Entity;

use Doctrine\DBAL\LockMode;
use Doctrine\ORM\EntityRepository;

use Mby\UserBundle\Entity\User;
use Mby\CommunityBundle\Entity\Community;

/**
 * SeasonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SeasonRepository extends EntityRepository
{

    public function findCurrentSeason(Community $community) {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                '   SELECT s
                    FROM MbyCommunityBundle:Season s
                    WHERE s.community = :communityId
                        AND s.fromDate <= :today
                        AND ( s.toDate IS NULL OR s.toDate >= :today )
                '
            )
            ->setParameter('communityId', $community->getId())
            ->setParameter('today', new \DateTime('today'))
        ;

        $result = $query->getSingleResult();

        return $result;
    }

    public function findOldSeasons(Community $community) {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                '   SELECT s
                    FROM MbyCommunityBundle:Season s
                    WHERE s.community = :communityId
                        AND s.toDate IS NOT NULL AND s.toDate < :today
                '
            )
            ->setParameter('communityId', $community->getId())
            ->setParameter('today', new \DateTime('today'))
        ;

        $results = $query->getResult();

        return $results;
    }

    public function findUserApplicableSeasons(User $user) {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
            '   SELECT s, c
                    FROM MbyCommunityBundle:Season s
                        JOIN s.community c
                    WHERE ( s.toDate IS NULL OR :today <= s.toDate )
                        AND s.fromDate <= :today
                        AND c.joinable = 1 AND s.active = 1
                        AND s.id NOT IN (
                            SELECT s2.id
                            FROM MbyCommunityBundle:Season s2
                                JOIN s2.memberships m2
                            WHERE m2.user = :userId
                        )
                    ORDER BY c.name ASC, s.name ASC'
        )
            ->setParameter('today', (new \DateTime())->format("Y-m-d"))
            ->setParameter('userId', $user->getId())
            ->setMaxResults(100);

        $result = $query->getResult();

        return $result;

    }

    public function findLastSeason(Community $community) {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
                '   SELECT s
                    FROM MbyCommunityBundle:Season s
                    WHERE s.community = :communityId
                    ORDER BY s.fromDate DESC
                '
            )
            ->setParameter('communityId', $community->getId())
            ->setMaxResults(1)
        ;

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    public function findPreviousSeason(Season $season) {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
            '   SELECT s
                    FROM MbyCommunityBundle:Season s
                    WHERE s.id = :seasonId
                        AND s.fromDate < :seasonFromDate
                    ORDER BY s.fromDate DESC
                '
        )
            ->setParameter('seasonId', $season->getId())
            ->setParameter('seasonFromDate', $season->getFromDate())
            ->setMaxResults(1)
        ;

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    public function findFollowingSeason(Season $season) {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
            '   SELECT s
                    FROM MbyCommunityBundle:Season s
                    WHERE s.id = :seasonId
                        AND s.fromDate > :seasonFromDate
                    ORDER BY s.fromDate ASC
                '
        )
            ->setParameter('seasonId', $season->getId())
            ->setParameter('seasonFromDate', $season->getFromDate())
            ->setMaxResults(1)
        ;

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    /** @deprecated */
    public function findUserActiveSeasons(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                '   SELECT s, c, m, r
                    FROM MbyCommunityBundle:Season s
                        JOIN s.community c
                        JOIN s.memberships m
                        JOIN m.responsibilities r
                    WHERE m.user = :userId
                      AND ( s.toDate IS NULL OR s.toDate >= :today )
                    ORDER BY r.rank ASC, c.name ASC, s.name ASC'
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('today', (new \DateTime())->format("Y-m-d"));

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }

    }

    /** @deprecated */
    public function findUserInactiveSeasons(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                '   SELECT s, c, m, r
                    FROM MbyCommunityBundle:Season s
                        JOIN s.community c
                        JOIN s.memberships m
                        JOIN m.responsibilities r
                    WHERE m.user = :userId
                      AND  s.toDate < :today
                    ORDER BY r.rank ASC, s.fromDate DESC, c.name ASC, s.name ASC'
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('today', (new \DateTime())->format("Y-m-d"));

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }

    }

    /** @deprecated */
    public function findAllUserSeasons(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                '   SELECT s, c, m, r
                    FROM MbyCommunityBundle:Season s
                        JOIN s.community c
                        JOIN s.memberships m
                        JOIN m.responsibilities r
                    WHERE m.user = :userId
                    ORDER BY s.fromDate DESC, r.rank ASC, c.name ASC
                '
            )
            ->setParameter('userId', $user->getId());
        
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }
        
    }


}
