<?php

namespace Mby\CommunityBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Mby\UserBundle\Entity\User;

/**
 * MembershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembershipRepository extends EntityRepository
{
    public function findUserActiveMemberships(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                '   SELECT m, s, c, r
                    FROM MbyCommunityBundle:Membership m
                        JOIN m.season s
                        JOIN s.community c
                        LEFT JOIN m.responsibilities r
                    WHERE m.user = :userId
                        AND s.fromDate <= :today AND ( s.toDate IS NULL OR :today <= s.toDate )
                        AND ( m.fromDate IS NULL OR m.fromDate <= :today) AND ( m.toDate IS NULL OR :today <= m.toDate )
                    ORDER BY r.id ASC, c.name ASC'
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('today', (new \DateTime())->format("Y-m-d"));

        $result = $query->getResult();
        $em->close();

        return $result;
    }

    public function findUserOldMemberships(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            '   SELECT m, s, c, r
                    FROM MbyCommunityBundle:Membership m
                        JOIN m.season s
                        JOIN s.community c
                        LEFT JOIN m.responsibilities r
                    WHERE m.user = :userId
                        AND ( s.toDate IS NOT NULL AND s.toDate < :today )
                        OR ( m.toDate IS NOT NULL AND m.toDate < :today )
                    ORDER BY c.name ASC, s.fromDate DESC'
        )
            ->setParameter('userId', $user->getId())
            ->setParameter('today', (new \DateTime())->format("Y-m-d"));

        $result = $query->getResult();
        $em->close();

        return $result;
    }

    public function findAllUserMemberships(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                '	SELECT ms 
                	FROM MbyCommunityBundle:Membership ms 
                		JOIN MbyCommunityBundle:Responsibilty resp
                		JOIN MbyCommunityBundle:Season sea
                        JOIN MbyCommunityBundle:Community com
                	WHERE ms.user_id = :userId
                	ORDER BY com.name ASC, sea.fromDate ASC, ms.fromDate ASC'
            )
            ->setParameter('userId', $user->getId());
        
        try {
	        return $query->getResult();
	    } catch (\Doctrine\ORM\NoResultException $e) {
	        throw $e;
	    }
        
    }

    public function loadResponsibilities(User $user, Season $season)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                '   SELECT m, r
                    FROM MbyCommunityBundle:Membership m
                        JOIN m.responsibilities r
                    WHERE m.user = :userId AND m.season = :seasonId
                    ORDER BY r.id ASC
                '
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('seasonId', $season->getId());
        
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }
        
    }
    
}
