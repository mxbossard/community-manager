<?php

namespace Mby\CommunityBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

use Mby\UserBundle\Entity\User;

/**
 * CommunityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityRepository extends EntityRepository
{

    /** @deprecated */
    public function findUserOwnedCommunities(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                "   SELECT c, s, cp, p, u
                    FROM MbyCommunityBundle:Community c
                        LEFT JOIN c.seasons s
                        JOIN c.privileges cp
                        JOIN cp.privilege p
                        JOIN cp.user u
                        JOIN c.privileges cp2
                    WHERE cp2.user = :userId
                        AND cp2.privilege = :privilege
                    ORDER BY c.name ASC, p.rank ASC, u.username ASC, s.fromDate DESC"
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('privilege', PrivilegeRepository::OWNER_CODE);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }

    }
    /** @deprecated */
    public function findUserAdministratorCommunities(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                "   SELECT c, s, cp, p, u
                    FROM MbyCommunityBundle:Community c
                        LEFT JOIN c.seasons s
                        JOIN c.privileges cp
                        JOIN cp.privilege p
                        JOIN cp.user u
                        JOIN c.privileges cp2
                    WHERE cp2.user = :userId
                        AND cp2.privilege = :privilege
                    ORDER BY c.name ASC, p.rank ASC, u.username ASC, s.fromDate DESC"
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('privilege', PrivilegeRepository::ADMIN_CODE);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }

    }
    /** @deprecated */
    public function findUserModeratorCommunities(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                "   SELECT c, s, cp, p, u
                    FROM MbyCommunityBundle:Community c
                        LEFT JOIN c.seasons s
                        JOIN c.privileges cp
                        JOIN cp.privilege p
                        JOIN cp.user u
                        JOIN c.privileges cp2
                    WHERE cp2.user = :userId
                        AND cp2.privilege = :privilege
                    ORDER BY c.name ASC, p.rank ASC, u.username ASC, s.fromDate DESC"
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('privilege', PrivilegeRepository::MODERATOR_CODE);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }

    }
    /** @deprecated */
    public function findAllUserCommunities(User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                '   SELECT c, s, m, r
                    FROM MbyCommunityBundle:Community c
                        JOIN c.seasons s
                        JOIN s.memberships m
                        JOIN m.responsibilities r
                    WHERE m.user = :userId
                    ORDER BY c.name, s.fromDate'
            )
            ->setParameter('userId', $user->getId());
        
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }
        
    }


    /** @deprecated */
    public function findOtherCommunities(User $user)
    {
        $entityManager = $this->getEntityManager();

        $query = $entityManager->createQuery(
            '   SELECT c, s
                    FROM MbyCommunityBundle:Community c
                        JOIN c.seasons s
                    WHERE s.id NOT IN
                        (   SELECT s2.id
                            FROM MbyCommunityBundle:Season s2
                                JOIN s2.community c2
                                JOIN s2.memberships m2
                                JOIN m2.responsibilities r2
                            WHERE m2.user = :userId)
                        AND ( s.toDate >= :today OR s.toDate IS NULL )
                    ORDER BY c.name, s.fromDate'
            )
            ->setParameter('userId', $user->getId())
            ->setParameter('today', (new \DateTime())->format("Y-m-d"));
        
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }
        
    }

    public function findAllCommunities()
    {
        $entityManager = $this->getEntityManager();

        $query = $entityManager->createQuery(
            '   SELECT c, s, m, r
                    FROM MbyCommunityBundle:Community c
                        JOIN c.seasons s
                        LEFT JOIN s.memberships m
                        LEFT JOIN m.responsibilities r
                    ORDER BY s.fromDate DESC, r.rank ASC, c.name ASC'
        );

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw $e;
        }

    }


}
