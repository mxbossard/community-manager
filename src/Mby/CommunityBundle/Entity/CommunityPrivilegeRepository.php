<?php

namespace Mby\CommunityBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Mby\UserBundle\Entity\User;

/**
 * CommunityPrivilegeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityPrivilegeRepository extends EntityRepository
{
	const OWNER_CODE = 'owner';
	const ADMIN_CODE = 'admin';
    const MODERATOR_CODE = 'moderator';

	/**
	 * @param User $user
	 * @return array
	 */
	public function findUserOwnerPrivileges(User $user)
	{
		$em = $this->getEntityManager();
		$query = $em->createQuery(
				"   SELECT cp, c, s, cp2, u
                    FROM MbyCommunityBundle:CommunityPrivilege cp
                    	JOIN cp.community c
                        LEFT JOIN c.seasons s
                        JOIN c.privileges cp2
                        JOIN cp2.privilege p
                        JOIN cp2.user u
                    WHERE cp.user = :userId
                        AND cp.privilege = :privilege
                    ORDER BY c.name ASC, s.fromDate DESC, p.rank ASC"
			)
			->setParameter('userId', $user->getId())
			->setParameter('privilege', PrivilegeRepository::OWNER_CODE);

		$result = $query->getResult();

		return $result;
	}

	/**
	 * @param User $user
	 * @return array
	 */
	public function findUserAdminPrivileges(User $user)
	{
		$em = $this->getEntityManager();
		$query = $em->createQuery(
			"   SELECT cp, c, s, cp2, u
                    FROM MbyCommunityBundle:CommunityPrivilege cp
                    	JOIN cp.community c
                        LEFT JOIN c.seasons s
                        JOIN c.privileges cp2
                        JOIN cp2.privilege p
                        JOIN cp2.user u
                    WHERE cp.user = :userId
                        AND cp.privilege = :privilege
                    ORDER BY c.name ASC, s.fromDate DESC, p.rank ASC"
			)
			->setParameter('userId', $user->getId())
			->setParameter('privilege', PrivilegeRepository::ADMIN_CODE);

		$result = $query->getResult();

		return $result;
	}

	/**
	 * @param User $user
	 * @return array
	 */
	public function findUserModeratorPrivileges(User $user)
	{
		$em = $this->getEntityManager();
		$query = $em->createQuery(
			"   SELECT cp, c, s, cp2, u
                    FROM MbyCommunityBundle:CommunityPrivilege cp
                    	JOIN cp.community c
                        LEFT JOIN c.seasons s
                        JOIN c.privileges cp2
                        JOIN cp2.privilege p
                        JOIN cp2.user u
                    WHERE cp.user = :userId
                        AND cp.privilege = :privilege
                    ORDER BY c.name ASC, s.fromDate DESC, p.rank ASC"
			)
			->setParameter('userId', $user->getId())
			->setParameter('privilege', PrivilegeRepository::MODERATOR_CODE);

		$result = $query->getResult();

		return $result;
	}

	/**
	 * @param Community $community
	 * @return array
	 */
	public function findCommunityPrivileges(Community $community) {
		$em = $this->getEntityManager();
		$query = $em->createQuery(
			"   SELECT cp, u
                    FROM MbyCommunityBundle:CommunityPrivilege cp
                        JOIN cp.user u
                        JOIN cp.privilege p
                    WHERE cp.community = :communityId
                    ORDER BY p.rank ASC, u.username ASC"
		)
			->setParameter('communityId', $community->getId());

		$result = $query->getResult();

		return $result;
	}

}
